---
title: "ggplot 101 recitation üéÉ"
author: "Daniel Quiroz, Jessica Cooperstone"
subtitle: "Week 5"
format:
  html:
    toc: true
    toc-depth: 4
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
pumpkins_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv')
```

# Introduction

We are going to practice using `ggplot2` today, focusing wrangling data, mapping variables to aesthetics, and adding geoms.

We are going to use data from the [TidyTuesday](https://www.tidytuesday.com/) project. For this recitation, we are going to use the [Giant Pumpkins](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-10-19) data which is collected from the [Great Pumpkin Commonwealth](https://gpc1.org/). You can learn more about how the data is structured [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-10-19).

Today, you are going to make this plot:

![Our plot for today](img/pumpkins_plot.jpg)

> Question: How can we replicate this plot?

## Goals of this recitation

**Work with real messy data**

- Import data from github
- Modify variables types
- Select observations with certain values
- Wrangle some more
- Practice plotting

```{r echo=FALSE, out.width="70%", fig.align="center", fig.cap="Illustration taken from https://www.allisonhorst.com"}
knitr::include_graphics("img/dplyr_wrangling.png")
```

### Download data from Github

When you open the [github](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-10-19) page you will see a file called `pumpkins.csv`. You also  are introduced about the details of the data (i.e., variables, variable types, descriptions), as well as how to import the it.

First thing first, we are going to import the data by reading the csv file
with the Github link provided. You can also read the data in by downloading it manually, saving it, and then loading it.

```r
# load libraries
library(tidyverse)

# Import giant pumpkins data
pumpkins_raw <- readr::read_csv('WHAT-GOES-HERE??')
```

Once we have imported our data, how can you check it out?

```{r}
glimpse(pumpkins_raw)
```

Do some of these variables contain more than one piece of information?

- What is embedded within the variable `id`? 
- What type of info does `id` contain?
- What types of variables are `place` and `weight_lbs`?  Are there any limitations to plotting these variable types?

# Wrangling

## Turn one character column into two ‚úÇÔ∏è

From both looking at the data, and reading about the variable `id` on the documentation page, you can see that it contains two pieces of information. To be able to interact with them separately, we need to separate this column into two columns (i.e. `year` and `type`).

Try doing this with the function [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) from the tidyr package. Or you can use [`separate_wider_delim()`](https://tidyr.tidyverse.org/reference/separate_wider_delim.html).

```r
pumpkins_raw %>%
   separate(WHAT-GOES-HERE)
```

## Select observations by their values üéÉ

Now that you separated the year and crop type, keep only the data for Giant Pumpkins. 

<details>
    <summary>Need a hint?</summary>
Hint, you can use the [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function from
the `dplyr` package.
</details>

```{r echo=FALSE, out.width="70%", fig.align="center", fig.cap="Illustration taken from https://www.allisonhorst.com"}
knitr::include_graphics("img/dplyr_filter.jpeg")
```

```r
pumpkins_raw %>%
   filter(...predicate/condition...) 
```

Now that you hae kept only the Giant Pumpkins, retain only the observations that were the winners (i.e. those in  first place).

```r
pumpkins_raw %>%
   filter(...predicate/condition...) %>%
   filter(...predicate/condition...)
```

## Remove pesky strings üòë

If we were to try and plot our data as it is now we would not get our desired outcome. But try it anyway.

```r
pumpkins_raw %>%
  code-to-separate %>%
  code-to-filter %>%
  code-to-plot
```

What is weird about this y-axis?
```{r echo=FALSE}
pumpkins_filt <- pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & place == "1")

pumpkins_filt %>%
  ggplot(aes(year, weight_lbs)) + 
    geom_point()
```

If you take a look at the variables of the `weight_lbs` column, it contains a commas
as the thousand separator. R does not recognize this as a number (and instead views it as a character) so and it has to be removed prior changing the column type. There are a few ways to do this.

Let's practice handling strings by removing the comma. You can use  [`str_remove()`](https://www.rdocumentation.org/packages/stringr/versions/1.4.0/topics/str_remove) function from the `tidyvers`e package `stringr`. Here is an example of how `str_remove()` works.

```{r}
wrong_number <- "700,057.58"
wrong_number
```

Using `str_remove()` 
```{r}
stringr::str_remove(string = wrong_number, pattern = ",")
```

Remember, we don't want to just remove the thousands place comma in one number, we want to **edit the dataset to remove the comma.**

In this case, you can embed `str_remove()` within the  `mutate()` function, which can create new variables or modify existing ones. In our case, we want to modify the `weight_lbs` variable to remove the comma. Give it a try.

```{r echo=FALSE, out.width="70%", fig.align="center", fig.cap="Illustration taken from https://www.allisonhorst.com"}
knitr::include_graphics("img/dplyr_mutate.png")
```

```r
pumpkins_raw %>%
  code-to-separate %>%
  code-to-filter %>%
  mutate(variable = str_remove(arguments-here)) 
```
Commas, gone! üëèüëèüëè

## Convert character to numeric üî¢
Now the comma is gone, you can simply change the variable `weight_lbs` from a character to numeric, so it can be plotted like a number., to change the column type, we are going to use the `as.numeric()` function. Here's some example about how to use `as.numeric()`.

```{r}
right_number_chr <- stringr::str_remove(string = wrong_number, pattern = ",")

right_number_number <- as.numeric(right_number_chr)
class(right_number_number)
```

Let's add this to our growing pipe.

```r
pumpkins_raw %>%
  code-to-separate %>%
  code-to-filter %>%
  mutate(variable = str_remove(arguments-here)) %>%
  mutate(variable = as.numeric(arguments-here))
```

# Plot 
With the `weight_lbs` variable corrected, we can re-plot.

```r
pumpkins_raw %>%
  code-to-separate %>%
  code-to-filter %>%
  mutate(variable = str_remove(arguments-here)) %>%
  mutate(variable = as.numeric(arguments-here)) %>%
  code-to-plot
```


## Where are the lines? 

Why do you think the lines aren't showing up? 

<details><summary>Need a hint?<summary>
Hint - look at what variable type `year` is.
</details>

How can you fix this? Hint, you can change `year` to either numeric or a date. Try using some functions from the package [`lubridate`](https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html) or the function [`as.Date()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/as.Date).

```r
pumpkins_raw %>%
  code-to-separate %>%
  code-to-filter %>%
  mutate(variable = str_remove(arguments-here)) %>%
  mutate(variable = as.numeric(arguments-here)) %>%
  mutate(do-something-with-your-date) %>%
  code-to-plot
```

## Playing around

Try using different geoms besides `geom_point()` and `geom_line()`. Which might make sense in this situation?

Can you color all the lines blue?

Can you color the data based on year?

Can you change color and change shape based on country?

Can you make a plot showing the distribution of weights of all giant pumpkins entered in 2021?

Can you make a boxplot showing the distribution of weights of all giant pumpkins across all years? Also can you add all the datapoints on top of the boxplot? Is this a good idea? Might there be a better geom to use than a boxplot?
