---
title: "ggplot 101 recitation ðŸŽƒ"
author: "Daniel Quiroz, Jessica Cooperstone"
subtitle: "Week 5"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Introduction
We are going to practice using ggplot today, focusing on the data,
aesthetic, and geom layers. We are going to use data from the [TidyTuesday](https://www.tidytuesday.com/) project. For this recitation, we are going to use the [Giant Pumpkins](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-10-19)
data which is collected from the [Great Pumpkin Commonwealth](https://gpc1.org/). 

At the end of of this module you will create of of this descriptive plots

## Libraries

```{r libraries, warning = FALSE, message = FALSE}
library(tidyverse)
library(lubridate)
```

## Read in data
```{r}
pumpkins_raw <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv')
```

# Full pipe and plot

```{r pipe and plot}
pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & place == "1") %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = ymd(year, truncated = 2)) %>% 
  filter(type == "P" & place == "1") %>% # giant pumpkins and first place
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% # remove comma
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% # make weight numeric
  mutate(year = ymd(year, truncated = 2)) %>% # change year to date format
    ggplot(aes(year, weight_lbs)) + 
    geom_point() + 
    geom_line()
```

# Playing around
### Try using different geoms besides `geom_point()` and `geom_line()`. Which might make sense in this situation?

Showing wrangling first then will plot after.
```{r}
pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & place == "1") %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = ymd(year, truncated = 2L)) 
```

Can also parse the date in a slightly different way.
```{r}
(pumpkins_to_plot <- pumpkins_raw %>%
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & place == "1") %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = as.POSIXct(year, format = "%Y")) %>%
  mutate(year = as.Date(year, format = "%Y")))
```

Could also parse year as a number and then adjust the breaks on the x-axis to not have decimal places.
```{r}
pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & place == "1") %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = as.numeric(year)) %>%
  ggplot(aes(x = year, y = weight_lbs)) +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = seq(2013, 2021, 2))
```

### Can you color all the lines blue?
```{r}
pumpkins_to_plot %>%
  ggplot(aes(x = year, y = weight_lbs)) +
  geom_line(color = "blue") +
  geom_point()
```

### Can you color the data based on year?
```{r}
pumpkins_to_plot %>%
  ggplot(aes(x = year, y = weight_lbs)) +
  geom_line() +
  geom_point(aes(color = year))
```

Because date is a continuous variable, we are getting a continuous color scale, which might not be what we want. We can get around it by setting date as a factor.
```{r}
pumpkins_to_plot %>%
  ggplot(aes(x = year, y = weight_lbs)) +
  geom_line() +
  geom_point(aes(color = as.factor(year)))
```

### Can you color and change shape based on country?
```{r}
pumpkins_to_plot %>%
  ggplot(aes(x = year, y = weight_lbs)) +
  geom_line() +
  geom_point(aes(color = as.factor(year), shape = country))
```

### Can you make a plot showing the distribution of weights of all giant pumpkins entered in 2021?
```{r}
pumpkins_2021 <- pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P" & year == 2021) %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = ymd(year, truncated = 2L)) 

pumpkins_2021 %>%
  ggplot(aes(x = weight_lbs)) +
  geom_density()
```

### Can you make a boxplot showing the distribution of weights of all giant pumpkins across all years? 
Also can you add all the datapoints on top of the boxplot? Is this a good idea? Might there be a better geom to use than a boxplot?
```{r}
pumpkins_all <- pumpkins_raw %>% 
  separate(col = "id", into = c("year", "type")) %>%
  filter(type == "P") %>% 
  mutate(weight_lbs = str_remove(weight_lbs, ",") ) %>% 
  mutate(weight_lbs = as.numeric(weight_lbs)) %>% 
  mutate(year = ymd(year, truncated = 2L)) 

pumpkins_all %>%
  ggplot(aes(x = as.factor(year), y = weight_lbs)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.1)

pumpkins_all %>%
  ggplot(aes(x = as.factor(year), y = weight_lbs)) +
  geom_violin(draw_quantiles = 0.5)
```



