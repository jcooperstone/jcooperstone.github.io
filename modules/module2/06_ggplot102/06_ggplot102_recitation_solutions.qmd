---
title: "ggplot 102: Facets, Scales, Labels, and Themes (but now üê∂) recitation solutions"
author: "Jessica Cooperstone"
subtitle: "Week 6"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r dogs, fig.alt = "Three dogs looking longingly at the camera as they are about to have dinner. On the left is Nacho, Jess's cream colored French Bulldog, in the middle is Petunia, a black American Staffordshire Terrier, and on the right is Inu, a white and grey Pitbull.", fig.cap= "Nacho (Jess's dog, left) along with his friends Petunia (middle) and Inu (right) waiting for dinner", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/dogs.jpg")
```

## Introduction

We will practice what we learned this week in [ggplot102](2_05_themes_labels_facets/05_ggplot102.html) on:

* [Facets](https://ggplot2.tidyverse.org/reference/index.html#facetting)
* [Scales](https://ggplot2.tidyverse.org/reference/index.html#scales)
* [Labels](https://ggplot2.tidyverse.org/reference/index.html#labels)
* [Themes](https://ggplot2.tidyverse.org/reference/index.html#themes)

### Load libraries and data
Before we get started, let's load our libraries and data. Today we will be looking again at some different data from the [Tidy Tuesday project](https://www.tidytuesday.com/) (here is the [Github repo](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-02-01/readme.md)) about dog breeds.

```{r tidytuesdayR, eval = FALSE}
install.packages("tidytuesdayR")
```


```{r libraries, warning = FALSE, message = FALSE}
library(tidyverse)
library(tidytuesdayR)
```

We will be using the data that is from February 1, 2022, so let's download it. The readme for this data is [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-02-01/readme.md).
```{r load-data}
tuesdata <- tidytuesdayR::tt_load('2022-02-01')
```

### Let's look at it
`tuesdata` is a list of 3 dataframes `breed_traits`, `trait_description` and `breed_rank`.
```{r glimpse tuesdata}
glimpse(tuesdata)
```

Note `tuesdata` is a list of 3 dataframes.

We will use the `$` to see the different dataframes individually.
```{r breed-traits}
glimpse(tuesdata$breed_traits)
```

```{r trait-description}
glimpse(tuesdata$trait_description)
```

```{r glimpse breed_rank}
glimpse(tuesdata$breed_rank)
```

## Top 5 breeds 2020 

Write code to determine what the 5 most popular dog breeds in 2020 were. There are many ways to do this.

#### `clean_names()`
Because each of these datasets has some non-conventional column names, I am going to run `janitor::clean_names()` on each df, and save them in my environment so I won't have to keep using the dollar sign `$` accessor.
```{r clean-names and dfs}
library(janitor)

breed_traits <- clean_names(tuesdata$breed_traits)
trait_description <- clean_names(tuesdata$trait_description)
breed_rank <- clean_names(tuesdata$breed_rank)
```

What are the most popular breeds in 2020, three ways.
```{r most popular 2020}
breed_rank %>%
  filter(x2020_rank <= 5)

breed_rank %>%
  arrange(x2020_rank) %>%
  slice(1:5)

breed_rank %>%
  slice_min(x2020_rank, n = 5) # min because a low rank is "high"
```

## Top 5 breeds across 2013-2020

What are the 5 most popular and the 5 least popular dogs across this time frame? There are many ways to do this. Hint: create a new variable that is a sum of all the ranks from 2013, allowing a composite score of the popularity of each dog breed across this time period.
```{r all time most and least popular wide}
# most popular
breed_rank %>%
  rowwise() %>%
  mutate(rank_sum = sum(across(x2013_rank:x2020_rank))) %>%
  ungroup() %>%
  select(breed, rank_sum, everything()) %>%
  slice_min(n = 5, order_by = rank_sum) %>% # min because here lower sum is more popular
  knitr::kable() # makes a nice formatted table

# least popular            
breed_rank %>%
  rowwise() %>%
  mutate(rank_sum = sum(c_across(x2013_rank:x2020_rank))) %>%
  ungroup() %>%
  select(breed, rank_sum, everything()) %>%
  arrange(rank_sum) %>%
  slice_max(n = 5, order_by = rank_sum) %>% # max bc here higher sum is less popular
  knitr::kable() # makes a nice formatted table
```


Another way to do it still with wide data.
```{r all time most and least popular second way wide}
# create a vector with the rowSums for the ranks from 2013 to 2020
breed_rank_2013to2020 <- breed_rank %>%
  select(x2013_rank:x2020_rank) %>%
  rowSums() %>% # calculate the sum across the rows
  as.data.frame() %>% # convert from vector to dataframe
  rename(rank_sum = 1) # rename the first and only column to rank_sum 

# bind back to the rest of the data
breed_rank_sum <- bind_cols(breed_rank, breed_rank_2013to2020) %>%
  select(breed, rank_sum, everything()) # move breed and rank_sum to front

# most popular
breed_rank_sum %>%
  arrange(rank_sum) %>%
  slice_min(n = 5, order_by = rank_sum)

# least popular
breed_rank_sum %>%
  arrange(rank_sum) %>%
  slice_max(n = 5, order_by = rank_sum)
```

A third way with long data.
```{r all time most and least popular long}
# create long data cleaned
breed_rank_sum_long <- breed_rank %>%
  pivot_longer(cols = x2013_rank:x2020_rank, names_to = "year", values_to = "rank") %>%
  separate(col = year, sep = "_", into = c("year", "extra")) %>% # separate year column parts
  mutate(year = str_remove(string = year, pattern = "x")) %>% # remove the "x"
  select(breed, year, rank)

head(breed_rank_sum_long)

# most popular
breed_rank_sum_long %>%
  group_by(breed) %>% # do operation by breed
  summarize(rank_sum = sum(rank)) %>% # add all ranks
  arrange(rank_sum) %>% # actually not necessary
  slice_min(order_by = rank_sum, n = 5)

# least popular
breed_rank_sum_long %>%
  group_by(breed) %>% # do operation by breed
  summarize(rank_sum = sum(rank)) %>% # add all ranks
  arrange(desc(rank_sum)) %>% # actually not necessary
  slice_max(order_by = rank_sum, n = 5)
```


## Popularity ranking 2013-2020

Create a plot where you take the 12 most popular dogs from 2020, and plot their popularity rank from 2013 to 2020. Hint, to facet, you need to have the variable you want to facet in one column.

I'm showing you a slightly different way to clean up your long dataframe here.
```{r breed rank tidy, warning = FALSE, message = FALSE}
# go from wide to long data or "tidy" data
breed_rank_tidy <- breed_rank %>%
  pivot_longer(cols = x2013_rank:x2020_rank,
              names_to = "year",
              values_to = "rank")

# remove extra character in year
breed_rank_tidy$year <- breed_rank_tidy$year %>%
  str_remove(pattern = "x") %>%
  str_remove(pattern = "_rank")
```

```{r filtering top 12 and plot}
# what dogs should I include?
dogs_to_include <- breed_rank_tidy %>%
  filter(year == 2020 & rank <= 12) 

# plot
breed_rank_tidy %>%
  filter(breed %in% dogs_to_include$breed) %>%
  ggplot(aes(x = year, y = rank)) +
    geom_point() +
    facet_wrap(vars(breed), 
               labeller = labeller(breed = label_wrap_gen(20))) +
    theme(axis.text.x = element_text(angle = 90))
```

Alter the aesthetics of this plot until you think it looks good.
```{r top 12 make pretty}
breed_rank_tidy %>%
  filter(breed %in% dogs_to_include$breed) %>%
  ggplot(aes(x = year, y = rank, group = breed)) +
    geom_point() +
    geom_line() +
    facet_wrap(vars(fct_reorder(breed, rank))) + # orders facets by mean rank so more popular first
    scale_y_reverse(breaks = seq(1, 25, 4)) + # reverse so that lower number rank is at the top and set the labels to start at 1, increment by 4 until 25 since a zero rank doesn't exist
    theme_minimal() + 
    theme(axis.text.x = element_text(angle = 90), # make x-axis labels on 90degree angle
          strip.text = element_text(size = 8), # change strip text size
          panel.grid.major.x = element_blank()) + # remove some grid lines
    labs(x = "Year",
         y = "Popularity rank among all AKC dogs",
         title = "Popularity of 12 Most Popular AKC Dog Breeds in 2020 from 2013-2020",
         subtitle = "Labrador retrievers are so popular!")
  
```

What dog has jumped in the rankings most from 2013 to 2020? What has dropped the most?
```{r biggest ranking changes}
breed_rank %>%
  mutate(rank_inc = (x2020_rank - x2013_rank)) %>%
  select(breed, rank_inc, everything()) %>%
  slice_min(n = 1, order_by = rank_inc) %>%
  select(breed, rank_inc, x2013_rank, x2020_rank)

breed_rank %>%
  mutate(rank_inc = (x2020_rank - x2013_rank)) %>%
  select(breed, rank_inc, everything()) %>%
  slice_max(n = 1, order_by = rank_inc) %>%
  select(breed, rank_inc, x2013_rank, x2020_rank)
```

