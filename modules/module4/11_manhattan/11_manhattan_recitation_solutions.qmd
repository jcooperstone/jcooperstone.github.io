---
title: "Manhattan Plots Recitation Solutions"
author: "Jessica Cooperstone"
subtitle: "Week 11"
format:
  html:
    toc: true
    toc-depth: 4
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction
We are going to practice making Manhattan plots today.

```{r, message = FALSE, warning = FALSE}
library(tidyverse) # for everything
library(ggrepel) # for repelling labels
library(qqman) # for gwas data

gwasResults <- qqman::gwasResults
```

## Investigate your data.

### What are your columns?

```{r}
glimpse(gwasResults)
```

### How many markers are there?

```{r}
# dimensions of dataframe
dim(gwasResults)

# how many unique SNP
length(unique(gwasResults$SNP))
```

### How are the markers distributed across the chromosomes?
The function `summarize()` from `dplyr` is sometimes masked by another function. If you have find you are getting an error when you call `summarize()` that says something like "argument "by" is missing, with no default" then specify explicitly that you want to use `dplyr::summarize()`. You could also use the British spelling `summarise()` and that also works. Here's a [stack overflow post](https://stackoverflow.com/questions/33807624/understanding-ddply-error-message-argument-by-is-missing-with-no-default) where you can learn more.
```{r}
gwasResults %>%
  group_by(CHR) %>%
  dplyr::summarize(min_bp = min(BP),
                   max_bp = max(BP),
                   number_of_markers = length(SNP))
```

## Make a Manhattan plot.
Color by chromosome, make sure the x-axis breaks are appropriate, be sure your y-axis is -log10 pvalue. Label the top 3 most significant points with their SNP number.

Create new column called NegLog10P which is the negative log10 pvalue.
```{r}
gwasResults_neglog10 <- gwasResults %>%
  mutate(NegLog10P = -log10(P))
```

Create a new variable called SNP_number so we can plot this on the x-axis.
```{r}
gwasResults_neglog10 <- gwasResults_neglog10 %>%
  mutate(SNP_number = parse_number(SNP))

range(gwasResults_neglog10$SNP_number)
```

Set axis for plotting.
```{r}
(set_axis <- gwasResults_neglog10 %>%
  group_by(CHR) %>%
  summarise(min = min(SNP_number),
            max = max(SNP_number),
            center = (max - min)/2))
```

Set what the Bonferroni -log10 pvalue needs to be for significance.
```{r}
bonferroni_pval <- -log10(0.05/nrow(gwasResults_neglog10))
```

Indicate which are the significant points in the plot.
```{r}
significant <- gwasResults_neglog10 %>%
  filter(NegLog10P > bonferroni_pval) %>%
  arrange(-NegLog10P) %>%
  slice(1:3) # take the first 3 which works bc we arranged descending
```

Plot
```{r}
gwasResults_neglog10 %>%
  ggplot(aes(x = SNP_number, y = NegLog10P, color = as.factor(CHR))) +
  geom_point() +
  geom_label_repel(data = significant,
                  aes(x = SNP_number, y = NegLog10P, label = SNP)) +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$CHR) +
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  theme_classic() +
  theme(legend.position = "none") + # legend not really necessary
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "I actually don't know what trait this GWAS is for",
       subtitle = "Points above the dotted line are significant after a Bonferroni multiple testing correction")
```

