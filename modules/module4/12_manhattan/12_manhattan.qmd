---
title: "Manhattan Plots"
author: "Jessica Cooperstone"
subtitle: "Week 12"
format:
  html:
    toc: true
    toc-depth: 4
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

Today we are going to continue putting it together in Module 4. Today's material is on making [Manhattan plots](https://en.wikipedia.org/wiki/Manhattan_plot), which is a commonly used plot type for visualizing the result of genome wide association studies (GWAS). The name comes from its resemblance to the skyscrapers in Manhattan, poking above the background of the rest of the buildings.

```{r manhattan plot wiki, fig.alt = "A Manhattan plot from Wikipedia, on the x-axis is chromosome position, and on the y is negative log10 pvalue. Points represents associations between allelic variation at each marker, with a trait of interest. Here there are 22 chromosomes and regions of interest on chr 6, 8, 12 and 19", fig.cap= "Figure from [Wikipedia](https://en.wikipedia.org/wiki/Manhattan_plot#:~:text=A%20Manhattan%20plot%20is%20a,GWAS)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/manhattan_wiki.png")
```

The plot visualizes the relationship between a trait and genetic markers. The x-axis shows the position on each chromosome, and the y-axis shows the negative log (usually log10) p-value of the quantitative response of a trait to that specific marker. Negative log10 p-value is used because a significant p-value is always small, and this transformation converts low p-value to a number that can be seen easily among the background of non-significant associations.

If you work in genetics/genomics, it is likely you will create Manhattan plots. Even if you think you'll never make one of these types of plots, its a useful activity to see additional ways of customizing your plots.

```{r libraries, message = FALSE, warning = FALSE}
library(glue) # easy pasting
library(ggrepel) # repelling labels
library(tidyverse) # everything
```

#### Read in data

Today we are going to continue to use some different real research data collected by Emma Bilbrey from my team where we conducted many GWAS in apple. This work was published in 2021 in New Phytologist and can be found [here](https://nph.onlinelibrary.wiley.com/doi/abs/10.1111/nph.17693). Click on Sections and go to Supporting Information and you'll find Table S16. This data is more complex than a typical GWAS so we are only going to use a small portion of it.

We will be reading in [Table S16](https://nph.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fnph.17693&file=nph17693-sup-0007-TableS16.csv) which includes the -log10 p-values for the GWAS conducted across all apples for all features found in the LC-MS negative ionization mode metabolomics dataset.

The data is present in a .csv file, so we will use the function `read_csv()` from the tidyverse. We want to import Supplemental Table 16. 

This will take a second, its a big file.

```{r read data, eval = FALSE}
gwas <- read_csv("data/nph17693-sup-0007-tables16.csv") # be patient
```

```{r read data actually, echo = FALSE}
gwas <- read_csv("/Users/jessicacooperstone/Library/CloudStorage/OneDrive-TheOhioStateUniversity/BuckeyeBox Data/JLC_Files/OSU/research/personnel/z_previous members/emma bilbrey/Thesis/Publication/New Phy Submission/PostAcceptance/Bilbrey_NewPhyt2021_TablesS12toS20/TableS16_LCMS_Neg_Ped_mGWASresults.csv")
```

What are the dimensions of this dataframe? What kind of object is it?

```{r dim blups}
dim(gwas)

class(gwas)
```

Because this dataframe is so big, if we use `head(gwas)` we will get a print out of the first 6 rows, and all the columns. In thi case there are 4704 columns so that will be unwieldy.

Emma came up with a simple way to approach this when she was writing her code, she wrote herself a little function that she could use regularly to extract out the first 5 rows, and the first 5 columns, without having to index each time.

If we wanted to just see the first 5 rows, the first 5 columns we could do this:

```{r head short by indexing}
gwas[1:5,1:5]
```

```{r write head_short}
head_short <- function(x){
  x[1:5,1:5] # print first 5 rows and columns of an object
  } 
```

Now instead of indexing all the time, we can just run `head_short()` which I think is easier. We will talk a little bit more about writing functions later today.

```{r run head_short}
head_short(gwas)
```

### Data investigating

Let me provide you a little bit of info about this data:

-   `Index` provides a unique number identifier for each SNP
-   `Linkage_Group` indicates the chromosome
-   `Genetic_Distance` gives you the physical genetic distance on each chromosome
-   The rest of the columns represent a metabolomic feature, and the data in each cell represents the -log10 p-values for the relationship between that SNP and that feature in the GWAS.

We will write a little code to see this better.

How many markers are included here?

```{r nrow}
nrow(gwas)
```

How many linkage groups do we have? (Each linkage group is a chromosome.)

```{r how many chr}
unique(gwas$Linkage_Group)
```

What is the range of `Genetic_Distance` and `Index` for each chromosome?

```{r genetic distance range}
gwas %>%
  group_by(Linkage_Group) %>%
  dplyr::summarize(min_genetic_distance = min(Genetic_Distance),
            max_genetic_distance = max(Genetic_Distance),
            min_index = min(Index),
            max_index = max(Index))
```

Ok here we can see `Index` does not repeat, but `Genetic_Distance` restarts with each chromosome.

## Manhattan plot: chlorogenic acid

At its core, a Manhattan plot is a scatter plot. The data we are working with has `r (ncol(gwas)-3)` traits, which here are relative metabolite abundance. We are going to pick one metabolite to start working with.

We will start with the feature that represents chlorogenic acid, a caffeoyl-quinic acid you find in apples. The column we want is `X353.09194_2.23795`. The data is already present as the -log10 p-value for the relationship between allelic variation at that marker, and relative abundance of chlorogenic acid.

```{r manhattan plot, message = FALSE, warning = FALSE}
# rename X353.09194_2.23795 to chlorogenic_acid
gwas <- gwas %>%
  rename(chlorogenic_acid = `X353.09194_2.23795`)

gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point()
```

See how color is plotted on a continuous scale? This is because `Linkage_Group` is a continuous, numeric variable. Since each chromosome is actually discrete, let's convert `Linkage_Group` to a factor and then plot again.

### `Linkage_Group` as a factor

```{r linkage group as factor}
# make Linkage_Group a factor
gwas$Linkage_Group <- as.factor(gwas$Linkage_Group)

# first pass manhattan plot
gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point()
```

Better but this really isn't what we want. We want our x-axis to indicate the chromosome number in the middle of the block of that chromosome, not label by `Index` which just is a key for linking back to each specific marker.

### Set axis

If we want to label the x-axis with breaks for each chromosome, we have to do some wrangling first. Just like we did some calculations in the lesson on adding statistics, we will calculate some min, center, and max for each chromosome so we know where to put the labels.

```{r set axis}
(set_axis <- gwas %>%
  group_by(Linkage_Group) %>%
  dplyr::summarize(min = min(Index),
            max = max(Index),
            center = (max - min)/2))
```

```{r axis breaks by chr}
gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
# set breaks and labels using set_axis  
  scale_x_continuous(breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  theme_classic() +
  theme(legend.position = "none") + # legend not really necessary
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "GWAS of chlorogenic acid in apple")
```

### Alternate colors

Having a rainbow of colors is not really necessary here, and in fact telling exactly where chromosome 15 ends and 16 begins is difficult because the colors are so similar.

What you will see in a lot of papers is people simply alternate the colors of their points by chromosome so you can easily tell which points belong to which chromosome.

```{r alternate colors}
gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
  scale_x_continuous(breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
# alternating colors by chromosome, black and darkgray
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for Chlorogenic Acid in Apple")
```

### Removing that annoying front gap

The gap between chromosome 1 and the y-axis of the plot sort of bothers me. Let's remove it.

```{r remove front gap}
gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
  scale_x_continuous(expand = c(0,0), # remove gap between y-axis and chr1
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "grey52"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for Chlorogenic Acid in Apple")
```

### Add p-value hline

Because we have so many SNPs, we are making a lot of comparisons that require a multiple-testing correction or we run the risk of an enormous number of false-positives. We can use the conservative Bonferroni correction, which takes our p-value, and the total number of comparisons we are making, creating a new adjusted value that our p-values need to be less than to be considered significant. In this case, the number of comparisons are our number of rows, in this case `r nrow(gwas)`

```{r add line for sig pvalue}
# what would the pvalue cut off with a bonferroni correction be?
bonferroni_pval <- -log10(0.05/nrow(gwas))

gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for Chlorogenic Acid in Apple")
```

### Color sig points

We might want to better see the points (i.e., SNPs) that are significantly related to chlorogenic acid content by coloring them differently from the other points. Think about how you could also use this in volcano plots, or any other time you want to highlight some points on a plot.

```{r}
# select all SNPs with -log10 pvalue > bonferroni cutoff for chlorogenic acid
chlorogenic_acid_sig <- gwas %>%
  filter(chlorogenic_acid > bonferroni_pval) %>%
  select(Index, Linkage_Group, Genetic_Distance, chlorogenic_acid)

gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
# another geom_point layer with only the sig points and make them red
  geom_point(data = chlorogenic_acid_sig, 
             aes(x = Index, y = chlorogenic_acid), color = "red") +
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for Chlorogenic Acid in Apple")
```

### Label most sig marker

We might be interested to know the marker that has the most significant association with chlorogenic acid content, and label it on our plot.

```{r}
# select which SNP has the smallest pvalue.
smallest_pval <- chlorogenic_acid_sig %>% 
  filter(chlorogenic_acid == max(chlorogenic_acid))

gwas %>%
  ggplot(aes(x = Index, y = chlorogenic_acid, color = Linkage_Group)) +
  geom_point() +
  geom_point(data = chlorogenic_acid_sig, 
             aes(x = Index, y = chlorogenic_acid), color = "red") +
  geom_label_repel(data = smallest_pval,
                   aes(x = Index, y = chlorogenic_acid, label = glue("Index: {Index}"))) +
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for Chlorogenic Acid in Apple")
```

## Investigating other traits

In this study, we conducted a series of GWAS on thousands of metabolomic features in apple. What if we wanted to see Manhattan plots for certain features based on how important we could predict they would be? For example, what if we want to see the Manhattan plot for the feature with biggest -log10p-value? Or the feature that has a significant association with the largest number of markers?

To make this wrangling easier, we will convert our data, as we have many times before, from wide to long with `pivot_longer()`.

### Wide to long (again)

```{r gwas tidy}
# pivoting, our favorite
gwas_tidy <- gwas %>%
  pivot_longer(cols = starts_with("X"), # all the metabolomic features
               names_to = "feature",
               values_to = "neg_log10_p")

# how did it go?
head(gwas_tidy)
```

### Set p-value cutoff

We can make another df that includes only the features that have at least one marker where there is a significant p-value.

```{r}
# make df of associations that pass bonferroni correction
gwas_tidy_bonferroni <- gwas_tidy %>%
  filter(neg_log10_p > bonferroni_pval)

# how many unique features are there?
length(unique(gwas_tidy_bonferroni$feature))

# how many unique markers are there?
length(unique(gwas_tidy_bonferroni$Index))
```

There are `r length(unique(gwas_tidy_bonferroni$feature))` unique features/metabolite that have a Bonferroni adjusted significant p-value with at least one marker. There are `r length(unique(gwas_tidy_bonferroni$Index))` unique markers that have a Bonferroni adjusted significant p-value with at least one feature/metabolite.

### Data investigating

What features are associated with the largest number of markers?

```{r}
gwas_tidy_bonferroni %>%
  group_by(feature) %>%
  count() %>%
  arrange(desc(n))
```

Wow, the marker `X417.13237_1.82968` has significant associations with 46 markers. What would that Manhattan plot look like?

```{r}
gwas_tidy %>%
  filter(feature == "X417.13237_1.82968") %>%
  ggplot(aes(x = Index, y = neg_log10_p, color = Linkage_Group)) +
  geom_point() +
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "darkgray"), 17)) +
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = "Manhattan Plot after GWAS for 417.13237 m/z at retention time 1.82968 in Apple")
```

## Making many plots at once

What if we want to make Manhattan plots for the 50 features/metabolites that are associated with the most markers? This is probably too many plots to facet, so we can do some calculations, write a function to make plots, and apply it over our dataframe.

First, how many significant associations with a Bonferroni multiple testing correction are there?

```{r}
# make df of associations that pass bonferroni correction
gwas_tidy_bonferroni <- gwas_tidy %>%
  filter(neg_log10_p > bonferroni_pval)

# how many unique features are this?
gwas_tidy_bonferroni %>%
  count(feature) 

# how many unique markers are there?
gwas_tidy_bonferroni %>%
  count(Index) 
```

Which features are associated with the largest number of markers?

```{r}
gwas_tidy_bonferroni %>%
  count(feature) %>%
  arrange(desc(n))
```

Which markers are associated with the largest number of features?

```{r}
gwas_tidy_bonferroni %>%
  count(Index) %>%
  arrange(desc(n))
```

We will make a new df that includes only the 50 features with the most makers associated with them.

```{r}
# create a df with only the top 50 features with the most marker associations
top50 <- gwas_tidy_bonferroni %>%
  count(feature) %>%
  arrange(desc(n)) %>%
  slice_head(n = 50)

# what does that look like?
head(top50)
```

Now we can filter our dataset to only include our top 50 features
```{r}
# filter the whole dataset to include only top 50 features
gwas_top50_long <- gwas_tidy %>%
  filter(feature %in% top50$feature)
```

### Writing a function to plot

Then we can write a function to plot, where we will iterate across `feature_of_interest`. Here, `feature_of_interest` is just the name I've assigned here, but you could easily call it `x` or `i` or whatever.

```{r}
# write a function to make your plots across the features of interest
manhattan_plot <- function(feature_of_interest){
  gwas_top50_long %>% # our df with only the top 50, but long
  filter(feature == feature_of_interest) %>% # pick the feature_of_interest only
  ggplot(aes(x = Index, y = neg_log10_p, color = Linkage_Group)) +
  geom_point() + 
  geom_hline(yintercept = bonferroni_pval, color = "grey", linetype = "dashed") +
  scale_x_continuous(expand = c(0,0),
                     breaks = (set_axis$center + set_axis$min), 
                     labels = set_axis$Linkage_Group) +
  scale_color_manual(values = rep(c("black", "gray"),17)) +
  labs(x = "Chromosome",
       y = expression("-log"[10]*"P-Value"),
       title = glue("{feature_of_interest}")) + # here we glue the feature name in the title
  theme_classic() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5))
  }
```

Before trying to use our new function `manhattan_plot` on 50 features, let's try it out on one. We can provide our feature of interest as a string.
```{r}
manhattan_plot("X599.12186_2.10421")
```

Now that our function is working for one feature, let's create a vector of features to iterate over, and plot. I am calling that vector `features_to_plot`. It contains the unique feature names from `gwas_top50_long`.
```{r}
features_to_plot <- unique(gwas_top50_long$feature)
```

### Applying the function with `map()`.

Once we have our function written, we can apply that function over a vector using [`purrr:map()`](https://purrr.tidyverse.org/reference/map.html). What `map()` does is take a function and apply it to a vector. In this case, the function is `manhattan_plot` (the function that makes a Manhattan plot), and it is applied over `features_to_plot`, the vector of features we want a plot for.
```{r}
# create an object called my_plots which is a list 
# the list contains our 50 plots
my_plots <- map(features_to_plot, # vector to apply over
            manhattan_plot) # what function to use

# print the first 6
my_plots[1:6]
```

### Saving out plots
But you can print them all, save particular ones using `ggsave()`, or do what we are going to do here, which is save each of them to a new folder, each as their own `.svg` because why use raster when you can vectorize.

First we will create a vector of what we want our file names to look like, and apply them to be the names of our plots.
```{r file names for saving}
# use str_c to combine two character vectors
# here, features_to_plot and adding .svg so the file name 
# includes the extension type
# then set that as the names for my_plots
names(my_plots) <- str_c(features_to_plot, ".svg")
```

Then, we will save.
```{r save to svg, eval = FALSE}
# use pwalk to "walk" across the different plots and save them
# to use the path subfolder "img" you need to create that in your working dir
pwalk(list(names(my_plots), my_plots), # what to iterate over and output
      ggsave, # what the function is
      path = "img/") # where they should go
```

Now all of your plots are in your working directory. Remember, you need to add the directory `img` if you want to save with the code I'm using here.

## Useful resources

-   [`purrr:map()`](https://purrr.tidyverse.org/reference/map.html)