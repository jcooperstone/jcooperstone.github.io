---
title: "Leftover tidbits"
author: "Jessica Cooperstone"
subtitle: "Week 13"
format:
  html:
    toc: true
    toc-depth: 4
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

Today we are going to go over a bunch of stuff I thought was interesting but didn't fit specifically into any of the other lessons. This includes some cool ggplot extension packages we haven't gone over yet, and heatmaps that utilize base R plotting.

```{r was sad now happy, fig.alt = "A digital cartoon with two illustrations: the top shows the R-logo with a scary face, and a small scared little fuzzy monster holding up a white flag in surrender while under a dark storm cloud. The text above says ‚Äúat first I was like‚Ä¶‚Äù The lower cartoon is a friendly, smiling R-logo jumping up to give a happy fuzzy monster a high-five under a smiling sun and next to colorful flowers. The text above the bottom illustration reads ‚Äúbut now it‚Äôs like‚Ä¶‚Äù", fig.cap= "Artwork by [@allison_horst](https://twitter.com/allison_horst)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/sad-now-happy.png")
```

### Load libraries
Loading the libraries that are for each section. Individual libraries are before each section so you can see which go with what plot types.
```{r load libraries}
library(tidyverse) # for everything
```

## Really start using an Rproject üìΩÔ∏è

```{r rproj illustration, fig.alt = "A cartoon of a cracked glass cube looking frustrated with casts on its arm and leg, with bandaids on it, containing ‚Äúsetwd‚Äù, looks on at a metal riveted cube labeled ‚ÄúR Proj‚Äù holding a skateboard looking sympathetic, and a smaller cube with a helmet on labeled ‚Äúhere‚Äù doing a trick on a skateboard.", fig.cap= "Artwork by [@allison_horst](https://twitter.com/allison_horst)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/rproj.png")
```

I have noticed that many of you are still not using RProjects. I would really recommend that for easy file management that you do. Here is an [a chapter in R for Data Science](https://r4ds.had.co.nz/workflow-projects.html) on how to set one up. If you want to start using Git in the future, you will need to set up a project.

## gghighlight üî¶

```{r gghighlight illustration, fig.alt = "A cartoon of 3 fuzzy monsters making a ggplot. Titled gghighlight: highlight geoms in ggplot, and shows an example of a line plot with many grey lines in the background, and a purple and blue line highlighted in color allowing the viewer to see the series that have a max temp value over 20.", fig.cap= "Artwork by [@allison_horst](https://twitter.com/allison_horst)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/gghighlight.jpeg")
```

The package [`gghighlight`](https://yutannihilation.github.io/gghighlight/index.html) allows you to highlight certain geoms in ggplot. Doing this helps your reader focus on the thing you want them to, and helps prevent plot spaghetti. To practice with `gghighlight` we are going to use some data from the R package [`gapminder`](https://www.rdocumentation.org/packages/gapminder/versions/0.3.0)

### Install
```{r gghighlight install, eval = FALSE}
installl.packages("gghighlight")
install.packages("gapminder")
```

### Load libraries
First let's load our libraries.
```{r gghlighlight libraries}
library(gghighlight) # for highlighting
library(gapminder) # where data is
```

### Wrangle
We can create a dataframe that includes only the data for the countries in the continent Americas.
```{r gghlighlight wrangling}
gapminder_americas <- gapminder %>%
  filter(continent == "Americas")
```

### Plot
If we look at all the countries at once, we get plot spaghetti üçù.
```{r gghighlight base plot, warning = FALSE, message = FALSE}
gapminder_americas %>%
  ggplot(aes(x = year, y = lifeExp, group = country, color = country)) +
  geom_line() +
  theme_minimal() +
  labs(x = "Year",
       y = "Life Expectancy (years)",
       title = "Life Expectancy in Countries in the Americas",
       subtitle = "From 1952 to 2007",
       caption = "Data from gapminder.org")
```

Create a lineplot showing the life expectacy over 1952 to 2007 for all countries, highlighting the United States.
```{r gghighlight US, warning = FALSE, message = FALSE}
# highlight just the US
gapminder_americas %>%
  ggplot(aes(x = year, y = lifeExp, group = country, color = country)) +
  geom_line() +
  gghighlight(country == "United States") +
  theme_minimal() +
  labs(x = "Year",
       y = "Life Expectancy (years)",
       title = "Life Expectancy in Countries in the Americas",
       subtitle = "From 1952 to 2007",
       caption = "Data from gapminder.org")
```

Facet our plot, and highlight the country for each facet.
```{r gghighlight facet, warning = FALSE, message = FALSE}
# facet and highlight each country
gapminder_americas %>%
  ggplot(aes(x = year, y = lifeExp)) +
  geom_line(aes(color = country)) +
  gghighlight() +
  theme_minimal() +
  theme(legend.position = "none",
        strip.text.x = element_text(size = 8),
        axis.text.x = element_text(angle = 90)) +
  facet_wrap(vars(country)) +
  labs(x = "Year",
       y = "Life Expectancy (years)",
       title = "Life Expectancy in Countries in the Americas",
       subtitle = "From 1952 to 2007",
       caption = "Data from gapminder.org")
```

## patchwork, a little more üìàüìäüìâ

```{r patchwork illustration, fig.alt = "Fuzzy cartoon monsters in white gloves and uniforms hanging multiple plots together on a wall, with an artist monster wearing a beret and smock directing them to the correct orientation. There is a blueprint plan on the wall showing how the plots should be arranged. Stylized title font reads ‚Äúpatchwork - combine & arrange your ggplots!‚Äù", fig.cap= "Artwork by [@allison_horst](https://twitter.com/allison_horst)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/patchwork.png")
```

We have talked a bit about [`patchwork`](https://patchwork.data-imaginist.com/) in the lecture on PCA but its such a useful package I wanted to go over it a bit more. The goal of `patchwork` is to make it very simple to combine plots together.

### Load libraries
```{r patchwork library}
library(patchwork)
library(palmerpenguins) # for making some plots to assemble
```

### Make some plots

```{r patchwork make plots}
plot1 <- penguins %>%
  ggplot(aes(x = species, y = body_mass_g, color = species)) +
  geom_boxplot()

plot2 <- penguins %>%
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
  geom_point()

plot3 <- penguins %>%
  drop_na() %>%
  ggplot(aes(x = island, y = flipper_length_mm, color = species)) +
  geom_boxplot() +
  facet_wrap(vars(sex))
```

### Combine plots

The simplest ways to combine plots is with the plus sign operator `+`. The forward slash `/` stacks plots. The pipe `|` puts plots next to each other. You can learn more about using patchwork [here](https://patchwork.data-imaginist.com/articles/patchwork.html). 

```{r patchwork regular combine, message = FALSE, warning = FALSE}
(plot1 + plot2) / plot3 
```


You can also add annotation and style to your plots. Learn more [here](https://patchwork.data-imaginist.com/articles/guides/annotation.html).
```{r patchwork add panel labels and title, message = FALSE, warning = FALSE}
(plot1 + plot2) / plot3 + plot_annotation(tag_levels = c("1"),
                  title = "Here is some information about penguins")
```

## gganimate üíÉ

```{r gganimate illustration, fig.alt = "Cartoon of a bunch of monsters watching data points of varing color and shape fly across a screen like fireworks. Several monsters are lighting the data off like fireworks. Stylized text reads ‚Äúgganimate: action figures!‚Äù", fig.cap= "Artwork by [@allison_horst](https://twitter.com/allison_horst)", out.width = "70%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/gganimate.png")
```

https://gganimate.com/reference/transition_states.html

### Install
```{r gganimate install, eval = FALSE}
install.packages("gganimate") # gganimate
install.packages("gapminder") # gapminder data for example
install.packages("magick") # for gif rendering
```

### Load libraries
```{r gganimate libraries}
library(gganimate)
library(ggrepel) # for text/label repelling
library(magick) # for gif rendering
```

### Plot
First let's make a base plot. Note that this measure of population isn't actually correct as its summing all of the populations across all the years.
```{r base plot to animate}
(base_plot <- gapminder %>%
  filter(continent == "Africa") %>%
  ggplot(aes(x = pop, y = reorder(country, pop))) +
  geom_col() +
  scale_x_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
  theme_classic() +
  labs(title = "Population from 1952 to 2007 in Africa", 
       x = "Population", 
       y = "Country"))
```

```{r animate plot, eval = FALSE}
(plot_to_animate <- base_plot +
  labs(subtitle = "Year: {frame_time}") + # label subtitle with year
  transition_time(year) + # gif over year
  ease_aes()) # makes the transitions smoother
```

```{r animate plot with params, eval = FALSE}
# set parameters for your animation
animated_plot <- animate(plot = plot_to_animate, 
                         duration = 10, # number of seconds for whole animation
                         fps = 10, # framerate, frames/sec
                         start_pause = 20, # show first time for 20 frames
                         end_pause = 20, # show end for 20 frames
                         width = 700, # width in pixels
                         height = 700, # height in pixels
                         renderer = magick_renderer()) # program for rendering
```

### Print
Print your animation.
```{r gganimate show animation, eval = FALSE}
animated_plot
```

```{r gganimate actually show animation, echo = FALSE}
knitr::include_graphics("gapminder_gif.gif")
```


### Save
Save your animation.
```{r gganimate save animation, eval = FALSE}
# save it
anim_save(filename = "gapminder_gif.gif",
          animation = last_animation())
```

## ggradar üì°
The package [`ggradar`](https://github.com/ricardo-bion/ggradar) allows you to create radar plots, which allow the plotting of multidimensional data on a two dimension chart. Typically with these plots, the goal is to compare the variables on the plot across different groups. We are going to try this out with the coffee tasting data from the distributions recitation.

Install `ggradar` if you don't already have it. This package is not available on CRAN for the newest version of R, so we can use `devtools` and `install_github()` to install it. You could also try using `install.packages()` and see if that works for you.
```{r ggradar install, eval = FALSE}
devtools::install_github("ricardo-bion/ggradar",
                         dependencies = TRUE)
```

```{r ggradar libraries data, warning = FALSE, message = FALSE}
library(ggradar)
library(scales) # for scaling data

# load coffee data from distributions recitation
tuesdata <- tidytuesdayR::tt_load('2020-07-07')

# extract out df on coffee_ratings
coffee <- tuesdata$coffee_ratings

# what are the column names again?
colnames(coffee)
```

We are going to wrangle the data to facilitate plotting. We are using `rescale` as we need the data for each attribute to be between 0 and 1.
```{r ggradar wrangling}
# tidy data to summarize easily
(coffee_summary_long <- coffee %>%
  select(species, aroma:cupper_points) %>% # first column is the groups
  pivot_longer(cols = aroma:cupper_points, # our favorite - tidy data to faciliate summarizing
               names_to = "attribute",
               values_to = "score") %>% 
  group_by(attribute) %>% # perform operations by species and attribute pairs
  mutate(across(where(is.numeric), rescale)) %>% # rescale data that is numeric
  ungroup() |> # get rid of grouping by attribute
  group_by(species, attribute) |> # group now by species and attribute
  summarize(mean_score = mean(score)))
```

`ggradar` takes wide data though, so we are going to pivot back to wide data.
```{r ggradar wrangling 2}
# go back to wide
coffee_summary_wide <- coffee_summary_long %>%
  pivot_wider(names_from = "attribute",
              values_from = "mean_score")
```

```{r ggradar coffee radar plot}
ggradar(coffee_summary_wide)
```

We are going to fix our labels and chanage some parameters on the plot to make it look nicer. You can also do this with coding (instead of manually) using the function [`to_any_case()`](https://www.rdocumentation.org/packages/snakecase/versions/0.11.1/topics/to_any_case) in the package `snakecase`.
```{r}
# write code to get nicer looking label names
# create a vector of our variable names

# create a vector of the column names
variables <- colnames(coffee_summary_wide)

# remove the first observation (species) since we don't want that one
variables <- variables[-1]

# use the function to_any_case() from the package snakecase
# to convert to "sentence" case
# install.packages("snakecase")
coffee_labels <- snakecase::to_any_case(variables, case = "sentence")

# how do they look?
coffee_labels
```

Or to do this manually
```{r}
# set our pretty coffee labels
# ggradar plots in alphabetical order so that is how we will label here
coffee_labels <- c("Acidity",
                   "Aftertaste",
                   "Aroma",
                   "Balance",
                   "Body",
                   "Clean cup",
                   "Cupper points",
                   "Flavor",
                   "Sweetness",
                   "Uniformity")
```


```{r ggradar coffee radar plotclean}
ggradar(coffee_summary_wide,
        axis.labels = coffee_labels,
        legend.position = "bottom",
        axis.label.size = 3,
        grid.label.size = 5) +
  theme(legend.key = element_rect(fill = NA, color = NA),
        plot.title = element_text(size = 16),
        legend.text = element_text(size = 12)) +
  labs(title = "Difference in average coffee cupper score \nin Arabica and Robusta beans")
```

## Heatmaps üü•‚¨úÔ∏èüü¶

### Install
```{r pheatmap install, eval = FALSE}
install.packages("pheatmap")
```

### Load libraries
```{r pheatmap library}
library(pheatmap)
```

### Plot
```{r pheatmap plot}
pheatmap(mtcars)
```

```{r pheatmap plot scaled clustered}
pheatmap(mtcars, 
         scale = "column",
         cluster_rows = TRUE) # cluster rows based on similarity
```


### ConplexHeatmap

The package [`ComplexHeatmap`](https://jokergoo.github.io/ComplexHeatmap-reference/book/index.html) allows more customized and complicated heatmaps to be produced. If you are interested in making heatmaps, this package is worth to check out.

## Useful resources

- [`gghighlight`](https://yutannihilation.github.io/gghighlight/)
- [`patchwork`](https://patchwork.data-imaginist.com/)
- [`gganimate`](https://gganimate.com/)
- [`ggradar`](https://www.rdocumentation.org/packages/ggradar/versions/0.2)
- [`pheatmap`](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12/topics/pheatmap)
- [ComplexHeatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/)