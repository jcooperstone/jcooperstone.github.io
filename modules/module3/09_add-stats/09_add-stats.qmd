---
title: "Annotating Statistics onto Plots"
author: "Jessica Cooperstone"
subtitle: "Week 9"
format:
  html:
    toc: true
    toc-depth: 4
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r xkcd null hypothesis, fig.alt = "A cartoon that says 'I can't believe schools are still teaching kids about the null hypothesis - I remember reading a big study that conclusively disprovied it years ago", fig.cap= "Figure from [XKCD](https://www.explainxkcd.com/wiki/index.php/1478:_P-Values)", out.width = "30%", fig.align = "center", echo = FALSE}
knitr::include_graphics("https://www.explainxkcd.com/wiki/images/0/04/null_hypothesis.png")
```

## Introduction

Now that we've spent some time going through how to make plots, today we will focus on how to annotate statistics that you've calculated to show statistical differences, embedded within your plot. I will go over a few different ways to do this.

The purpose of today's session is more to give you practical experience with running and retrieving statistical analysis output, than teaching about the assumptions and background of the test itself. If you are looking for a good statistics class, I would recommend Dr. Kristin Mercer's HCS 8887 Experimental Design.

### Load libraries and data

Before we get started, let's load our libraries.

We are going to use [data](https://allisonhorst.github.io/palmerpenguins/) that was collection about body characteristics of penguins on Palmer Station in Antarctica. This data is in a dataframe called `penguins` in the package `palmerpenguins` which you can download from CRAN.

```{r palmer penguins hex, fig.cap = "From [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/)", fig.alt = "a hexagon sticker in blue with a picture of a 3 cute cartoon penguins that says 'palmer penguins'", out.width = "20%", fig.align = "center", echo = FALSE}
knitr::include_graphics("img/palmerpenguins_hex.png")
```

```{r libraries, warning = FALSE, message = FALSE}
# install.packages(palmerpenguins)
library(tidyverse)
library(palmerpenguins) # for penguins data
library(rstatix) # for pipeable stats testing
library(agricolae) # for posthoc tests 
library(ggpubr) # extension for adding stats to plots
library(glue) # for easy pasting
```

```{r head penguins}
knitr::kable(head(penguins)) # kable to make a pretty table
```

## 2 group comparisons (t-tests or similar)

> Our question: Is there a significant difference in the `body_weight_g` of male and female penguins?

Before we run the statistics, let's make a plot to see what this data looks like.

```{r plot sex by BW}
# what are the values for sex?
unique(penguins$sex)

# plot
(penguins_by_sex <- penguins %>%
  drop_na(body_mass_g, sex) %>%
  ggplot(aes(x = sex, y = body_mass_g, color = sex)) + 
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(height = 0, width = 0.3) +
  scale_x_discrete(labels = c("Female", "Male")) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Sex",
       y = "Body Mass (g)",
       title = "Body mass of penguins by sex",
       subtitle = "Collected from Palmer Station, Antarctica",
       caption = "Data accessed from the R package palmerpenguins"))
```

It looks like there is a difference here. Before adding the statistics to our plot, let's:

1. test that our data is suitable for running the text we want
2. run the statistical test separately from the plot

### Testing assumptions

Briefly, in order to use parametric procedures (like a t-test), we need to be sure our data meets the assumptions for 1) normality and 2) constant variance. This is just one way to do these tests, there are others that I am not going to go over.

```{r normal distribution, echo=FALSE, fig.align="center", fig.alt="An orange normal distribution and a blue bimodal distribution where the orange distribution tells the blue one it is not normal", fig.cap="Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)", out.width="70%",}
knitr::include_graphics("img/not_normal.png")
```

#### Normality

We will test normality by the [Shapiro-Wilk test](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test) using the function `rstatix::shapiro_test()`. This function is a pipe-friendly wrapper for the function [`shapiro.test()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/shapiro.test), which just means you can use it with pipes.
```{r nornality sex}
penguins %>%
  drop_na(body_mass_g, sex) %>% # remove NAs
  group_by(sex) %>% # test by sex
  shapiro_test(body_mass_g) # test for normality
```
This data is not normal, which means we need to use non-parametric tests. Since we are not meeting the assumption for nornality, really you don't need to test for constant variance, but I'll show you how to do it anyway.

#### Constant variance

We can test for equal variance using Levene's test, [`levene_test()`](https://www.rdocumentation.org/packages/rstatix/versions/0.7.0/topics/levene_test) which is part of the `rstatix` package.  Again, this is a pipe-friendly wrapper for the function [`levene.test()`](https://www.rdocumentation.org/packages/lawstat/versions/3.4/topics/levene.test).
```{r constant variance sex}
penguins %>%
  drop_na(body_mass_g, sex) %>% # remove NAs
  levene_test(body_mass_g ~ sex) # test for constant variance
```
No constant variance. Double Non-parametric.

Can we visualize normality another way?

```{r body mass histogram by sex}
penguins %>%
  drop_na(body_mass_g, sex) %>%
  ggplot(aes(x = body_mass_g, y = sex, fill = sex)) +
  ggridges::geom_density_ridges(alpha = 0.7) +
  scale_y_discrete(labels = c("Female", "Male")) +
  theme_classic() +  
  theme(legend.position = "none") +
  labs(x = "Body Mass (g)",
       y = "Sex",
       title = "Distribution of body weights for male and female penguins")

```

Some of these distribution are bimodal (i.e., not normal). This is likely because we have 3 different species of penguins here. You can see below that actually each species looks reasonably normal.
```{r body mass histogram by sex and species}
penguins %>%
  drop_na(body_mass_g, sex) %>%
  ggplot(aes(x = body_mass_g, fill = sex)) +
  geom_histogram() +
  facet_grid(cols = vars(species), rows = vars(sex)) +
  theme_classic() +
  theme(legend.position = "none") +
  labs(x = "Body Mass (g)",
       y = "Count")
```


### Non-parametric t-test

This means if we want to test for different means, we can use the Wilcoxon rank sun test, or Mann Whitney test. If your data was normal, you could just change `wilcox_test()` to `t_test()` and the rest would be the same.
```{r wilxocon test}
penguins %>%
  drop_na(body_mass_g, sex) %>%
  wilcox_test(body_mass_g ~ sex,
              paired = FALSE)
```
This is not surprising, that there is a significant difference in body weight between male and female penguins. We can see this clearly in our plot.

How can we add the stats to our plot?

### Plot

#### Using `stat_compare_means()`
The function [`stat_compare_means()`](http://rpkgs.datanovia.com/ggpubr/reference/stat_compare_means.html) allows mean comparison p-values to be easily added to a ggplot. 

Note, the function should look at your data and test for normality and pick the statistical test accordingly. You can see that is working in the chunk below, but I would recommend that you always do your own statistical test and make sure you plot accordingly.
```{r stat_compare_means}
penguins_by_sex +
  stat_compare_means()

penguins_by_sex +
  stat_compare_means(method = "wilcox.test") 
```

#### Manually with `geom_text()` or `annotate()`

In general, plotting using `geom_text()` is easier, and follows classic `geom_()` syntax (e.g., includes `aes()`) but for some reason these don't pass as vectorized objects so sometimes it yields low quality images. Using `annotate()` passes as vectors and thus tends to be higher quality. You can decide which you want to use depending on your purpose.

If I'm being honest, the most common way that I would add statistics to a plot if I was trying to do just a few simple plots at once, would be with [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html) . I like to use `annotate()` over [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html) or [`geom_label()`](https://ggplot2.tidyverse.org/reference/geom_text.html) because it is vectorized and don't become low quality down the road.

With `geom_text()`
```{r geom_text asterisk}
penguins_by_sex +
  geom_text(aes(x = 2, y = 6500, label = "*"), # x, y, and label within aes()
            color = "black", size = 6)
```

With `annotate()`
```{r annotate asterisk}
penguins_by_sex +
  annotate(geom = "text", # note no aes()
           x = 2, y = 6500, 
           label = "*", 
           size = 6)
```

You can also add multiple annotation layers. I'm introducing a new function here, [`glue()`](https://glue.tidyverse.org/) which is amazing for easy syntax pasting of strings with data.

The syntax for `glue()` is like this:

```{r glue}
x <- 2 + 3

glue("2 + 3 = {x}")
```


```{r annotate asterisk pval glue}
# we did this already, just assigning to object
by_sex_pval <- penguins %>%
  drop_na(body_mass_g, sex) %>%
  wilcox_test(body_mass_g ~ sex,
              paired = FALSE)

# plot
penguins_by_sex +
  ylim(2500, 7500) + # adjust the y-axis so there's space for the label
  annotate(geom = "text", x = 2, y = 6500, label = "*", size = 6) +
  annotate(geom = "text", x = 2, y = 7000,
           label = glue("Wilcoxon signed rank test \np-value = {by_sex_pval$p}"))
```


## >2 group comparisons (ANOVA or similar)

When we are comparing means between more than 2 samples, we will have to first run a statistical test to see if there are any significant differences among our groups, and then if there are, run a post-hoc test. Before we do that, let's plot.

Are there significant differences in body mass 
```{r}
(penguins_f_massbyspecies <- penguins %>%
  drop_na(body_mass_g, species, sex) %>%
  filter(sex == "female") %>%
  ggplot(aes(x = species, y = body_mass_g, fill = species)) +
  geom_violin(outlier.shape = NA,
              draw_quantiles = 0.5) + # add the median by drawing 50% quantile
  ggdist::geom_dots(side = "both", color = "black", alpha = 0.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Penguin Species",
       y = "Body Mass (g)",
       title = "Body mass of female penguins by species",
       subtitle = "Collected from Palmer Station, Antarctica",
       caption = "Data accessed from the R package palmerpenguins"))
```

### Testing assumptions

#### Normality

```{r normality testing}
# testing normality by group
penguins %>%
  drop_na(body_mass_g, sex) %>% # remove NAs
  filter(sex == "female") %>%
  group_by(species) %>% # test by species
  shapiro_test(body_mass_g) # test for normality

# testing normality across all data
penguins %>%
  drop_na(body_mass_g, sex) %>% # remove NAs
  filter(sex == "female") %>%
  shapiro_test(body_mass_g) # test for normality
```

Ok looks like we have normally distributed data among the different species of female penguins.

#### Constant variance
[`levene_test()`](https://www.rdocumentation.org/packages/rstatix/versions/0.7.0/topics/levene_test) which is part of the `rstatix` package.  Again, this is a pipe-friendly wrapper for the function [`levene.test()`](https://www.rdocumentation.org/packages/lawstat/versions/3.4/topics/levene.test).
```{r constant variance ANOVA sex}
penguins %>%
  drop_na(body_mass_g, sex, species) %>% # remove NAs
  filter(sex == "female") %>%
  levene_test(body_mass_g ~ species) # test for constant variance
```

We have constant variance. Along with normally distributed data, this means that we can use parametric tests. In the case of >2 samples, that would be ANOVA.

### ANOVA
The most commonly used function to run ANOVA in R is called [`aov()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/aov) which is a part of the `stats` package that is pre-loaded with base R. So no new packages need to be installed here.

If we want to learn more about the function `aov()` we can do so using the code below. The help documentation will show up in the bottom right quadrant of your RStudio.
```{r aov?}
?aov()
```

We can run an ANOVA by indicating our model, and here I'm also selecting to drop the NAs for our variables of interest, and filtering within the `data =` argument.
```{r aov}
aov_female_massbyspecies <- 
  aov(data = penguins %>% 
             filter(sex == "female") %>%
             drop_na(body_mass_g, species),
      body_mass_g ~ species)
```

Now lets look at the aov object.
```{r summary aov}
summary(aov_female_massbyspecies)
```

We can take the output of our ANOVA and use the function `tidy()` within the `broom` package to turn our output into a tidy table.  Here, the notation `broom::tidy()` means I want to use the function `tidy()` that is a part of the `broom` package.  This works even though I haven't called `library(broom)` at the beginning of my script.
```{r tidy anova}
tidy_anova <- broom::tidy(aov_female_massbyspecies)

knitr::kable(tidy_anova)
```

See how this is different from just saving the ANOVA summary? Open both `anova_summary` and `tidy_anova` and note the differences.
```{r anova summary}
anova_summary <- summary(aov_female_massbyspecies)
```


### Posthoc group analysis

Now that we see we have a significant difference somewhere in the body mass of the 3 species of female penguins, we can do a posthoc test to see which groups are significantly different. We will do our post-hoc analysis using Tukey's Honestly Significant Difference test and the function [`HSD.test()`](https://www.rdocumentation.org/packages/agricolae/versions/1.3-5/topics/HSD.test) which is a part of the useful package `agricolae`.
```{r tukey hsd}
tukey_massbyspecies <- HSD.test(aov_female_massbyspecies, 
                      trt = "species", 
                      console = TRUE) # prints the results to console
```

Like we did with the aov object, you can also look at the resulting HSD.test object (here, `tukey_massbyspecies`) in your environment pane.

Here, instead of using the `broom` package, you can convert the part of the `tukey_bill_length` object that contains the post-hoc groupings into a dataframe using `as.data.frame()`.
```{r tidy tukey}
tidy_tukey <- as.data.frame(tukey_massbyspecies$groups)

tidy_tukey
```

### Plot

#### Using `stat_compare_means()`
```{r anova stat_compare_means}
penguins_f_massbyspecies +
  stat_compare_means()

penguins_f_massbyspecies +
  stat_compare_means(method = "anova")
```

#### Manually with `geom_text()` or `annotate()`

In general, plotting using `geom_text()` is easier, and follows classic `geom_()` syntax (e.g., includes `aes()`) but for some reason these don't pass as vectorized objects so sometimes it yields low quality images. Using `annotate()` passes as vectors and thus tends to be higher quality. You can decide which you want to use depending on your purpose.

We want to add the letters to this plot, so we can tell which groups of penguin `species` are significantly different.

Before we can do this, we will need to do some of everyone's favorite task, wrangling. We are going to figure out what the maximum `body_mass_g` for each species is, so it will help us determine where to put our letter labels.  Then, we can add our labels to be higher than the largest data point. We will calculate this for each group, so that the letters are always right about our boxplot.

```{r body mass max}
body_mass_max <- penguins %>%
  filter(sex == "female") %>%
  drop_na(body_mass_g, species) %>%
  group_by(species) %>%
  summarize(max_body_mass = max(body_mass_g))

body_mass_max
```

Let's add our post-hoc group info to `body_mass_max`, since those two dataframes are not in the same order.  Instead of binding the two dataframes together, we are going to join them using one of the dplyr `_join()` functions, which allows you to combine dataframes based on a specific common column. The join functions work like this:

- `inner_join()`: includes all rows in x and y.
- `left_join()`: includes all rows in x.
- `right_join()`: includes all rows in y.
- `full_join()`: includes all rows in x or y.

In this case, it doesn't matter which `_join()` we use because our dfs all have the exact same rows.

```{r tidy and join}
tidier_tukey <- tidy_tukey %>%
  rownames_to_column() %>% # converts rownames to columns
  rename(species = rowname) # renames the column now called rowname to species
  
# join
body_mass_for_plotting <- full_join(tidier_tukey, body_mass_max,
                               by = "species")
```

Let's plot. First using `geom_text()`
```{r plot anova geom_text}
penguins_f_massbyspecies +
  geom_text(data = body_mass_for_plotting,
            aes(x = species,
                y = 175 + max_body_mass, 
                label = groups))
```

Next using `annotate()`.
```{r plot anova annotate}
penguins_f_massbyspecies +
  annotate(geom = "text",
           x = c(3,2,1),
           y = 175 + body_mass_for_plotting$max_body_mass,
           label = body_mass_for_plotting$groups)
```

## Useful resources

There have been previous [Code Club](https://biodash.github.io/codeclub/) sessions about adding statistics to plots:

-   [`ggpubr` to add stats to plots by Daniel Quiroz](https://biodash.github.io/codeclub/s02e10_ggpubr/)
-   [t-tests in R by Mike Sovic](https://biodash.github.io/codeclub/s03e01_ttests/)
-   [Running ANOVA in R and accesing output](https://biodash.github.io/codeclub/s03e02_anova/)
-   [Testing ANOVA assumptions](https://biodash.github.io/codeclub/s03e04_anova2/)